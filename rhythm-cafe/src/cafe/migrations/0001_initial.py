# Generated by Django 5.0.7 on 2024-11-06 09:37

import cafe.libs.gen_id
import cafe.models.user
import django.core.serializers.json
import django.db.models.deletion
import django.utils.timezone
import functools
import rules.contrib.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(default=functools.partial(cafe.libs.gen_id.gen_id, *(cafe.libs.gen_id.IDType['USER'],), **{}), max_length=24, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', cafe.models.user.CafeUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.CharField(default=functools.partial(cafe.libs.gen_id.gen_id, *(cafe.libs.gen_id.IDType['CLUB'],), **{}), max_length=24, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('theme_pref', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark')], max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ClubInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin')], max_length=10)),
                ('expiry', models.DateTimeField()),
                ('code', models.CharField(max_length=100)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cafe.club')),
            ],
        ),
        migrations.CreateModel(
            name='ClubMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Admin')], max_length=10)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cafe.club')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='club',
            name='members',
            field=models.ManyToManyField(through='cafe.ClubMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DiscordGuild',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('club', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cafe.club')),
            ],
        ),
        migrations.CreateModel(
            name='RDLevel',
            fields=[
                ('id', models.CharField(default=functools.partial(cafe.libs.gen_id.gen_id, *(cafe.libs.gen_id.IDType['RD_LEVEL'],), **{}), max_length=24, primary_key=True, serialize=False)),
                ('artist', models.TextField()),
                ('artist_tokens', models.JSONField()),
                ('song', models.TextField()),
                ('song_alt', models.TextField(blank=True)),
                ('seizure_warning', models.BooleanField()),
                ('description', models.TextField(blank=True)),
                ('hue', models.FloatField()),
                ('authors', models.JSONField()),
                ('authors_raw', models.TextField()),
                ('max_bpm', models.IntegerField()),
                ('min_bpm', models.IntegerField()),
                ('difficulty', models.IntegerField()),
                ('single_player', models.BooleanField()),
                ('two_player', models.BooleanField()),
                ('last_updated', models.DateTimeField()),
                ('tags', models.JSONField()),
                ('has_classics', models.BooleanField()),
                ('has_oneshots', models.BooleanField()),
                ('has_squareshots', models.BooleanField()),
                ('has_freezeshots', models.BooleanField()),
                ('has_freetimes', models.BooleanField()),
                ('has_holds', models.BooleanField()),
                ('has_skipshots', models.BooleanField()),
                ('has_window_dance', models.BooleanField()),
                ('sha1', models.TextField(unique=True)),
                ('rdlevel_sha1', models.TextField()),
                ('is_animated', models.BooleanField()),
                ('rdzip_url', models.TextField()),
                ('image_url', models.TextField()),
                ('thumb_url', models.TextField()),
                ('icon_url', models.TextField(blank=True, default='')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cafe.club')),
                ('submitter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ClubRDLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cafe.club')),
                ('rdlevel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cafe.rdlevel')),
            ],
        ),
        migrations.CreateModel(
            name='RDLevelPrefillResult',
            fields=[
                ('id', models.CharField(default=functools.partial(cafe.libs.gen_id.gen_id, *(cafe.libs.gen_id.IDType['PREFILL'],), **{}), max_length=24, primary_key=True, serialize=False)),
                ('url', models.TextField(default='')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('version', models.IntegerField()),
                ('ready', models.BooleanField(default=False)),
                ('data', models.JSONField(default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('errors', models.TextField(default='')),
                ('club', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='cafe.club')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('username__startswith', 'u-')), name='cafe__user__username_startswith_u_'),
        ),
        migrations.AddConstraint(
            model_name='clubmembership',
            constraint=models.UniqueConstraint(fields=('user', 'club'), name='unique_user_and_club'),
        ),
        migrations.AddConstraint(
            model_name='clubrdlevel',
            constraint=models.UniqueConstraint(fields=('rdlevel', 'club'), name='unique_rdlevel_and_club'),
        ),
    ]
